paths:
  user_reset:
    get:
      tags: [Users]
      x-swagger-router-controller: api.user.custom
      operationId: reset
      summary: Reset user password
      parameters:
        - name: email
          in: query
          required: true
          type: string
      responses:
        200:
          description: Password reset
    post:
      tags: [Users]
      x-swagger-router-controller: api.user.custom
      operationId: verify_reset
      summary: Verify password reset token
      parameters:
        - name: reset
          in: body
          schema:
            type: object
            required:
              - token
              - pwd
              - id
            properties:
              id:
                type: string
              token:
                type: string
              pwd:
                type: string
      responses:
        200:
          description: Verified and reset
        401:
          description: Unauthorised user
  user_id_submissions:
    get:
      security:
         - apiKeyHeader: []
         - anonUser: []
      tags: [Users]
      x-swagger-router-controller: api.user.custom
      operationId: get_subs
      summary: Get all submissions for a user (or those matching an ID)
      parameters:
        - {$ref: './params.yaml#/parameters/id'}
      responses:
        200:
          description: Return submissions
          schema:
            type: array
            items:
              {$ref: './types.yaml#/definitions/Submission'}
        404:
          description: User not found
  user_login:
    post:
      tags: [Users]
      x-swagger-router-controller: api.user.custom
      operationId: login
      summary: Allow a user to login
      parameters:
        - name: user
          in: body
          required: true
          schema:
            {$ref: './types.yaml#/definitions/User'}
      responses:
        200:
          description: Login successful
        401:
          description: Incorrect login details
        404:
          description: User not found
  user_authorize:
    post:
      tags: [Users]
      x-swagger-router-controller: api.otoken
      operationId: generate
      summary: Post auth for token response
      parameters:
        - name: token
          in: body
          schema:
            {$ref: './types.yaml#/definitions/Otoken'}
      responses:
        200:
          description: Token created
  user_validate:
    get:
      tags: [Users]
      summary: OAuth2 token info
      x-swagger-router-controller: api.user.custom
      operationId: validate
      parameters:
        - name: key
          in: query
          type: string
      responses:
        200:
          description: Token info object
          schema:
            {$ref: './types.yaml#/definitions/User'}
  user_id:
    get:
      security:
         - apiKeyHeader: []
         - anonUser: []
      tags: [Users]
      x-swagger-router-controller: api.user.model
      operationId: get_user
      summary: Get all users (or those matching an ID)
      parameters:
        - {$ref: './params.yaml#/parameters/id'}
      responses:
        200:
          description: Return users
          schema:
            {$ref: './types.yaml#/definitions/User'}
        404:
          description: User not found
    put:
      security:
        - apiKeyHeader: []
        - anonUser: []
      tags: [Users]
      x-swagger-router-controller: api.user.model
      operationId: update_user
      summary: Update user details (change password, add details etc)
      parameters:
        - {$ref: './params.yaml#/parameters/id'}
        - name: user
          in: body
          schema:
            {$ref: './types.yaml#/definitions/User'}
      responses:
        200:
          description: User updated
          schema:
            {$ref: './types.yaml#/definitions/User'}
        404:
          description: User not found
    delete:
      security:
        - apiKeyHeader: []
        - anonUser: []
      tags: [Users]
      x-swagger-router-controller: api.user.model
      operationId: delete_user
      summary: Delete user (only allowed by the user themselves)
      parameters:
        - {$ref: './params.yaml#/parameters/id'}
      responses:
        200:
          description: User deleted
        404:
          description: User not found
        401:
          description: Not authorised
  register_user:
    post:
      tags: [Users]
      summary: Registration end point for a user account
      x-swagger-router-controller: api.user.model
      operationId: create_user
      parameters:
        - name: user
          in: body
          schema:
            {$ref: './types.yaml#/definitions/User'}
      responses:
        201:
          description: Created user
        409:
          description: User exists
  get_users:
    get:
      tags: [Users]
      security:
        - oauth2: []
      x-swagger-router-controller: api.user.model
      operationId: get_users
      parameters:
        - name: search_term
          in: query
          type: string
        - name: limit
          in: query
          type: integer
          minimum: 0
          default: 20
      responses:
        200:
          description: Return all users
          schema:
            type: array
            items:  
              {$ref: './types.yaml#/definitions/User'}
    
